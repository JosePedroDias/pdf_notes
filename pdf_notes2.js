// Generated by CoffeeScript 1.4.0
(function() {
  var PdfReader;

  PdfReader = (function() {

    function PdfReader(_uri, _el, _callbacks) {
      this._uri = _uri;
      this._el = _el;
      this._callbacks = _callbacks != null ? _callbacks : {};
      this._zoom = 1;
      if (this._el == null) {
        this._el = document.createElement('canvas');
        document.body.appendChild(this._el);
      }
      this._ctx = this._el.getContext('2d');
      this.open();
    }

    PdfReader.prototype.open = function(uri) {
      var pr;
      if (uri != null) {
        this._uri = uri;
      } else {
        uri = this._uri;
      }
      pr = this;
      PDFJS.disableWorker = true;
      return PDFJS.getDocument(uri).then(function(pdf) {
        pr._pdf = pdf;
        pr._currPage = 1;
        pr._numPages = pdf.numPages;
        if (pr._callbacks.onOpen) {
          pr._callbacks.onOpen(pr);
        }
        return pr.toPage();
      });
    };

    PdfReader.prototype.toPage = function(nr, isRelative) {
      if (nr == null) {
        nr = this._currPage;
      }
      if (isRelative) {
        this._currPage += nr;
      } else {
        this._currPage = nr;
      }
      if (this._currPage < 1) {
        this._currPage = 1;
      } else if (this._currPage > this._numPages) {
        this._currPage = this._numPages;
      }
      if (this._callbacks.onPageChanged) {
        this._callbacks.onPageChanged(this);
      }
      return this._pdf.getPage(this._currPage).then(this._renderPage.bind(this));
    };

    PdfReader.prototype.setZoom = function(_zoom) {
      this._zoom = _zoom;
      return this.toPage();
    };

    PdfReader.prototype.getZoom = function() {
      return this._zoom;
    };

    PdfReader.prototype.getNumberOfPages = function() {
      return this._numPages;
    };

    PdfReader.prototype.getCurrentPage = function() {
      return this._currPage;
    };

    PdfReader.prototype.toFirst = function() {
      return this.toPage(1);
    };

    PdfReader.prototype.toLast = function() {
      return this.toPage(this._numPages);
    };

    PdfReader.prototype.toNext = function() {
      return this.toPage(1, true);
    };

    PdfReader.prototype.toPrevious = function() {
      return this.toPage(-1, true);
    };

    PdfReader.prototype._renderPage = function(page) {
      var pageInPx, viewport;
      viewport = page.getViewport(this._zoom);
      pageInPx = [viewport.width, viewport.height];
      this._el.width = pageInPx[0];
      this._el.height = pageInPx[1];
      return page.render({
        canvasContext: this._ctx,
        viewport: viewport
      });
    };

    return PdfReader;

  })();

  window.PdfReader = PdfReader;

}).call(this);
